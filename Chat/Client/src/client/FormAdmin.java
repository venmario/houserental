/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Mario
 */
public class FormAdmin extends javax.swing.JFrame implements Runnable{

    Socket s;
    DataOutputStream out;
    BufferedReader inp;
    Thread t;
    Object objHS;
    
    /**
     * Creates new form FormAdmin
     */
    public FormAdmin() {
        initComponents();
    }

    public FormAdmin(Socket s) {
        initComponents();
        try {
            out = new DataOutputStream(s.getOutputStream());
            inp = new BufferedReader(new InputStreamReader(s.getInputStream()));
            if(t == null)
            {
                t = new Thread(this, "Admin Side");
                t.start();
            }
        } catch (IOException ex) {
            Logger.getLogger(FormConsul.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        txtChat = new javax.swing.JTextField();
        btnEnter = new javax.swing.JButton();
        comboBoxClient = new javax.swing.JComboBox<>();
        btnRefresh = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        btnEnter.setText("Enter");
        btnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterActionPerformed(evt);
            }
        });

        comboBoxClient.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxClientItemStateChanged(evt);
            }
        });
        comboBoxClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxClientActionPerformed(evt);
            }
        });

        btnRefresh.setText("refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Admin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(54, Short.MAX_VALUE)
                        .addComponent(comboBoxClient, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRefresh)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtChat)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                    .addComponent(btnEnter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(58, 58, 58)
                        .addComponent(comboBoxClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(95, 95, 95)
                        .addComponent(btnRefresh)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(txtChat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEnter)
                        .addGap(19, 19, 19))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        getClient();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void comboBoxClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxClientActionPerformed
        // TODO add your handling code here:
//        getHistory();
    }//GEN-LAST:event_comboBoxClientActionPerformed

    private void btnEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            String message = txtChat.getText();
                sendChat(comboBoxClient.getSelectedItem().toString()+"<:>"+message+"<:>"+"admin<:>admin");
                txtArea.append("Admin" + " : " + message +"\n");
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_btnEnterActionPerformed

    private void comboBoxClientItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxClientItemStateChanged
        // TODO add your handling code here:
//        getHistory();
    }//GEN-LAST:event_comboBoxClientItemStateChanged
  
    
    public void showHistory(String tmp)
    {
        txtArea.removeAll();
        System.out.println(tmp);
        String msgSplit[] = tmp.split("--");
        System.out.println(msgSplit.length);
        if (msgSplit.length > 1) {
            for (String str : msgSplit) 
            {
                if (str.equals("[HISRORY]")) {
                    System.out.println(str);
                }
                else{
                    txtArea.append(str+"\n");
                }
            }
        }
        
    }
    public void getHistory(){
        try {
            out.writeBytes("[HISTORY]:-:" +comboBoxClient.getSelectedItem().toString() + "\n");           
            
        } catch (IOException ex) {
            Logger.getLogger(FormConsul.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void showChat(String tmp){
        String msgSplit[] = tmp.split("//");
        if (msgSplit[0].equals(comboBoxClient.getSelectedItem().toString())) {
            txtArea.append(msgSplit[1] + "\n");
        }
        
    }
    
    public void sendChat(String tmp){
        try {
            out.writeBytes(tmp + "\n");
        } catch (IOException ex) {
            Logger.getLogger(FormConsul.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void getClient(){
        try {
            out.writeBytes("getHS" + "\n");
            
            
        } catch (IOException ex) {
            Logger.getLogger(FormConsul.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void Refresh(String tmp){
        String userClient = tmp;
            String clientSplited[] = userClient.split(":-:");
            comboBoxClient.removeAllItems();
                System.out.println("masuk if");
                for (String str : clientSplited) {
                    if (str.equals("[HS]")) {
                        continue;
                    }
                    else{
                        comboBoxClient.addItem(str);
                    }
                }
    }
    public void incomingCall(String msg){
        String msgSplit[] = msg.split("]");
        String uname = msgSplit[1];
        System.out.println(uname);
        FormCallAdmin fca = new FormCallAdmin(uname);
        fca.setVisible(true);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnter;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> comboBoxClient;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtChat;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while(true)
        {
            
            try {
                String msg = inp.readLine();
                if (msg.contains("[HS]")) {
                    System.out.println("if HS");
                    Refresh(msg);
                }
                else if(msg.contains("[HISTORY]"))
                {
                    System.out.println("masuk else if");
                    showHistory(msg);
                }
                else if(msg.contains("[called]"))
                {
                    System.out.println(msg);
                    incomingCall(msg);
                }
                else{
                    System.out.println("else");
                    showChat(msg);
                }
            } catch (IOException ex) {
                Logger.getLogger(FormConsul.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
