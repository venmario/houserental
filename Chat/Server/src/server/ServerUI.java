/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import com.service.Penyewa;
import com.service.Rumah;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Mario
 */
public class ServerUI extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form ServerUI
     */
    ArrayList<HandleSocket> clients = new ArrayList<>();
    HandleSocket callerSocket;
    HandleSocket calledSocket;
    ServerSocket ss;
    Socket s;
    Thread t;
    
        
        DatagramPacket incomingPacket,repliedPacket;
    public ServerUI() {
        initComponents();
        try {
            ss = new ServerSocket(23144);
            System.out.println("31");

            System.out.println("32");
            if (t == null) {
                t = new Thread(this, "Simple Chat");
                System.out.println("44");
                t.start();
            }
            
            
        } catch (IOException ex) {
            Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelStart = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelStart.setText("Server Start....");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(labelStart)
                .addContainerGap(177, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(labelStart)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void Login(HandleSocket _hs, String msg) {
        clients.add(_hs);
        System.out.println("menambah hs ke listClient");
        String msgSplit[] = msg.split(":");
        String username = msgSplit[1];
        String pass = msgSplit[2];
        String status;
        if (login(username, pass)) {
            status = "sukses";
        } else {
            status = "gagal";
        }
        Penyewa p = getPenyewa(username);
        for (HandleSocket hs : clients) {
            if (hs.equals(_hs)) {
                hs.username = username;
                hs.sendChat(status + ":" + p.getId() + ":" + p.getFullname() + ":" + p.getUsername());
            }
        }
    }

    public void historyChat(HandleSocket _hs, String msg) {
        String msgSplit[] = msg.split(":-:");
        String username = msgSplit[1];
        Penyewa p = getPenyewa(username);
        String historyChat = displayChat(p.getId());
        System.out.println("penyewa : " + username);
        for (HandleSocket hs : clients) {
            if (hs.equals(_hs)) {
                hs.sendChat("[HISTORY]--" + historyChat);
            }
        }
    }

    public void sendChat(String msg) {
        String msgSplit[] = msg.split("<:>");
        String penerima = msgSplit[0];
        String content = msgSplit[1];
        String pengirim = msgSplit[2];
        String usernamePengirim = msgSplit[3];
        String usernamePenyewa = "";
        Penyewa p;

        for (HandleSocket hs : clients) {
            if (hs.username.equals(penerima)) {
                hs.sendChat(usernamePengirim + "//" + pengirim + " : " + content);
                break;
            }
        }
        if (pengirim.equals("admin")) {
            usernamePenyewa = penerima;
        }
        else{
            usernamePenyewa = usernamePengirim;
        }
        p = getPenyewa(usernamePenyewa);
        int idpenyewa = p.getId();
        insertChat(pengirim + " : " + content+"--", idpenyewa);
    }

    public void getDataHS(HandleSocket _hs, String msg) {        
        String usernameClients = "";
        for (HandleSocket hs : clients) {
            if ((hs.username.equals(_hs.username))) {

            } else {
                usernameClients += hs.username + ":-:";
            }
        }
        for (HandleSocket hs : clients) {
            if (hs.equals(_hs)) {
                hs.sendChat("[HS]:-:" + usernameClients);
            }
        }
    }
    
    public void AcceptCall(String msg){
        callerSocket.sendChat(msg);
    }
    
    public void Called(HandleSocket _hs)
    {
        calledSocket = _hs;
    }
    
    public void call(HandleSocket _hs, String msg){
        callerSocket = _hs;
        String msgSplit[] = msg.split("]");
        String caller = msgSplit[1];
        System.out.println(caller);
        for (HandleSocket hs : clients) {
            if (hs.username.equals("admin")) {
                hs.sendChat("[called]"+caller);
            }
        }
    }
    
    public void disconnect(String msg){
        callerSocket.sendChat(msg);
        calledSocket.sendChat(msg);
        calledSocket = null;
        callerSocket = null;
    }
    
    public void connect(HandleSocket _hs)
    {        
        String usernameClients = "";
        for (HandleSocket hs : clients) {
            if ((hs.username.equals("admin"))) {

            } else {
                usernameClients += hs.username + ":-:";
            }
        }
        for (HandleSocket hs : clients) {
            if (hs.username.equals("admin")) {
                hs.sendChat("[HS]:-:" + usernameClients);
            }
        }
    }

    public void getDataHS(String msg) {
        String usernameClients = "";
        for (HandleSocket hs : clients) {
            if ((hs.username.equals("admin"))) {

            } else {
                usernameClients += hs.username + ":-:";
            }
        }
        for (HandleSocket hs : clients) {
            if (hs.username.equals("admin")) {
                hs.sendChat("[HS]:-:" + usernameClients);
            }
        }
    }

    public void getDataRumah(HandleSocket _hs, String msg) {
        String nama2Rumah = "";
        List<Rumah> listRumah = getRumah();
        for (Rumah r : listRumah) {
            nama2Rumah += r.getId() + ". " + r.getNama() + " harga= " + r.getHarga() + " $/malam:";
        }
        for (HandleSocket hs : clients) {
            if (hs.equals(_hs)) {
                hs.sendChat(nama2Rumah);
            }
        }
    }

    public void Book(HandleSocket _hs, String tmp) {
        String msgSplit[] = tmp.split("/");
        String namaRumah = msgSplit[1];
        String tanggalSewa = msgSplit[2];
        String idPenyewa = msgSplit[3];
        int idRumah = 0;
        int hargaRumah = 0;
        List<Rumah> listRumah = getRumah();
        for (Rumah rumah : listRumah) {
            if (rumah.getNama().equals(namaRumah)) {
                idRumah = rumah.getId();
                hargaRumah = rumah.getHarga();
            }
        }
        insertSewa(Integer.parseInt(idPenyewa), idRumah, tanggalSewa, hargaRumah);
        for (HandleSocket hs : clients) {
            if (hs.equals(_hs)) {
                hs.sendChat("booked");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelStart;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (true) {
            try {
                System.out.println("proses 3 way handshake");
                s = ss.accept();
                HandleSocket hs = new HandleSocket(this, s);
                System.out.println("membuat hs");                
                hs.start();
            } catch (IOException ex) {
                Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private static Boolean login(java.lang.String username, java.lang.String password) {
        com.service.HouseRentalServices_Service service = new com.service.HouseRentalServices_Service();
        com.service.HouseRentalServices port = service.getHouseRentalServicesPort();
        return port.login(username, password);
    }

    private static void insertSewa(int idPenyewa, int idRumah, java.lang.String tanggalSewa, int harga) {
        com.service.HouseRentalServices_Service service = new com.service.HouseRentalServices_Service();
        com.service.HouseRentalServices port = service.getHouseRentalServicesPort();
        port.insertSewa(idPenyewa, idRumah, tanggalSewa, harga);
    }

    private static java.util.List<com.service.Rumah> getRumah() {
        com.service.HouseRentalServices_Service service = new com.service.HouseRentalServices_Service();
        com.service.HouseRentalServices port = service.getHouseRentalServicesPort();
        return port.getRumah();
    }

    private static Penyewa getPenyewa(java.lang.String username) {
        com.service.HouseRentalServices_Service service = new com.service.HouseRentalServices_Service();
        com.service.HouseRentalServices port = service.getHouseRentalServicesPort();
        return port.getPenyewa(username);
    }

    private static String displayChat(int idpenyewa) {
        com.service.HouseRentalServices_Service service = new com.service.HouseRentalServices_Service();
        com.service.HouseRentalServices port = service.getHouseRentalServicesPort();
        return port.displayChat(idpenyewa);
    }

    private static void insertChat(String content, int idPenyewa) {
        com.service.HouseRentalServices_Service service = new com.service.HouseRentalServices_Service();
        com.service.HouseRentalServices port = service.getHouseRentalServicesPort();
        port.insertChat(content, idPenyewa);
    }

}
